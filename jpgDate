#!/bin/sh
#
# jpgDate file ... - get original date or date+time from JPEG files
#                     in format: 2005-07-17 or 2005-07-17+14-23-39
#
# Tue Nov 10 22:31:18 GMT 2015
#
# Copyright (C) 2022 Peter Scott - peterscott@pobox.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Other programme needed: exiftool
#
# (On Fedora and Centos the rpm is called: perl-Image-ExifTool)
#


# usage - display usage message
#
usage () {
  echo "Usage: $NAME [ -t ] file ..."
  exit 1
}


# checkSimple file - check file is plain, readable, not empty
#
checkSimple () {
  file=$1
  ls "$file" > /dev/null 2>&1
  if [ $? -ne 0 ]
  then echo "$NAME: $file: does not exist" >&2
       return 1
  elif [ -d "$file" ]
  then echo "$NAME: $file: is a directory" >&2
       return 1
  elif [ ! -r "$file" ]
  then echo "$NAME: $file: is not readable" >&2
       return 1
  elif [ ! -s "$file" ]
  then echo "$NAME: $file: is empty" >&2
       return 1
  else
       return 0
  fi
}


# doit file noFiles - do it to one file
#
doit () {
  file=$1
  noFiles=$2
  set `exiftool -DateTimeOriginal "$file" |
         sed -n '/ *Date.Time *Original *: /{
                     s/[ A-Za-z:/]*: *//
                     s/:/-/gp
                 }'` dummy
  test $noFiles -ne 1 && printf "$file:"
  if [ $1 != dummy ]
  then date=$1; time=$2
       test $noFiles -ne 1 && printf ' '
       printf $date
       test $timeNeeded && printf '+%s' $time
  fi
  echo
}


# prevent the user giving the script a name with white space in it
# -- saving the hassle of quoting internal file names
#
NAME=`basename "$0"`
words=`echo "$NAME" | wc -w`
if [ $words -ne 1 ]
then echo "\`$NAME': I don't allow white space in command names" >&2
     exit 3
fi

while getopts ':t' option
do   case $option in
       t) timeNeeded='-t' ;;
      \?) echo "$NAME: bad option -- $OPTARG" >&2
          usage
     esac 
done
shift `expr $OPTIND - 1`
test "$1" || usage
for file
do   checkSimple "$file" && doit "$file" $#
done
